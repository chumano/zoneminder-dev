/*
 * Copyright (c) 2017 Liming Shao <lmshao@163.com>
 */

#include "AudioEncoding.h"

//g++ -w main.cpp AudioEncoding.cpp -o main $(pkg-config --cflags --libs libavutil libavformat libavcodec)
int main()
{
    AudioEncoding audioEncoding;

    // use the pcm file generated by decoding mp3 file as input
    const char *inFile = "../output/out1.pcm";
    const char *outFile = "../output/Sample.mp3";

    // audioEncoding.init();

    // // Configure AVCodecContext parameters Manually
    // audioEncoding.initCodecContext();

    // audioEncoding.readFrameProc(inFile, outFile);

    AVCodecContext *codecContext = NULL;

    AVCodec *codec = avcodec_find_encoder(AV_CODEC_ID_MP3);
    if (!codec)
    {
        printf("Failed to find encoder\n");
        return 1;
    }

    codecContext = avcodec_alloc_context3(codec);
    if (!codecContext)
    {
        printf("Failed to alloc codec\n");
        return 1;
    }

    codecContext->bit_rate = 128000;
    codecContext->sample_fmt = AV_SAMPLE_FMT_FLTP;
    codecContext->sample_rate = 44100;
    codecContext->channel_layout = AV_CH_LAYOUT_STEREO;
    codecContext->channels = 2;

    if (avcodec_open2(codecContext, codec, 0) < 0)
    {
        printf("Failed to init codec context\n");
        return 1;
    }

    FILE *inputfs = fopen(inFile, "rb");
    FILE *outputfs = fopen(outFile, "wb");
    AVPacket packet;
    AVFrame *frame = av_frame_alloc();
    if (!frame)
    {
        printf("Failed to alloc frame\n");
        return 1;
    }
    frame->format = codecContext->sample_fmt;
    frame->nb_samples = codecContext->frame_size;
    frame->channel_layout = codecContext->channel_layout;

    if (av_frame_get_buffer(frame, 0) < 0)
    {
        printf("Failed to get buffer\n");
        return 1;
    }
    int num = 0;
    while (!feof(inputfs))
    {
        av_init_packet(&packet);
        packet.data = NULL;
        packet.size = 0;

        if (av_frame_make_writable(frame) < 0)
        {
            printf("Frame unwritable\n");
            return 1;
        }

        int sampleBytes = av_get_bytes_per_sample(codecContext->sample_fmt);
        for (int i = 0; i < frame->nb_samples; i++)
        {
            for (int j = 0; j < codecContext->channels; j++)
            {
                fread(frame->data[j] + i * sampleBytes, 1, sampleBytes, inputfs);
            }
        }

        avcodec_send_frame(codecContext, frame);
        int ret = avcodec_receive_packet(codecContext, &packet);
        if (!ret)
        {
            fwrite(packet.data, 1, packet.size, outputfs);
            av_packet_unref(&packet);
        }
    }

    printf("------------- get delayed data --------------------\n");

    while (true)
    {
        avcodec_send_frame(codecContext, NULL);
        int ret = avcodec_receive_packet(codecContext, &packet);
        if (ret == 0)
        {
            fwrite(packet.data, 1, packet.size, outputfs);
            av_packet_unref(&packet);
        }
        else if (ret == AVERROR_EOF)
        {
            printf("Finish encoding\n");
            break;
        }
        else
        {
            printf("Error while encoding\n");
            break;
        }
    }

    av_frame_free(&frame);
    fclose(inputfs);
    fclose(outputfs);
    avcodec_free_context(&codecContext);

    printf("Encoded successfully\n");
    return 0;
}